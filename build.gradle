buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.1'
        classpath 'org.ow2.asm:asm:9.2'
        classpath 'org.ow2.asm:asm-tree:9.2'
        classpath 'net.minecraftforge.gradleutils:GradleUtils:1.+'
    }
}

plugins {
  id 'org.cadixdev.licenser' version '0.6.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradleutils'

group = 'net.minecraftforge'
archivesBaseName = 'srg2source'
version = gradleutils.getTagOffsetBranchVersion()
println('Version: ' + version)
java.toolchain.languageVersion = JavaLanguageVersion.of(11)

configurations {
    implementation.canBeResolved = true
}

repositories {
    maven {
        name = "forge"
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        name = "eclipse"
        url = "https://repo.eclipse.org/content/groups/eclipse"
    }
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.jimfs:jimfs:1.2'

    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-tree:9.2'
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4' // easy CLI parsing

    // necessary eclipse AST stuff
    implementation 'org.eclipse.jdt:org.eclipse.jdt.core:3.28.0.v20211117-1416'

    //We use this to patch the JDT at runtime
    implementation 'cpw.mods:modlauncher:8.0.9'

    // ModLauncher has this on runtime scope
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    //Because tons of projects all parsing SRG files is annoying
    implementation 'net.minecraftforge:srgutils:0.4.3'
}

jar {
    exclude 'data/**'
    manifest {
        attributes 'version': project.version
        attributes 'javaCompliance': project.targetCompatibility
        attributes 'group': project.group
        attributes 'Main-Class': 'net.minecraftforge.srg2source.ConsoleTool'
    }
}


license {
    header = file('LICENSE-header.txt')
    include 'net/minecraftforge/'
}

import java.util.zip.*
import org.objectweb.asm.*
import org.objectweb.asm.tree.*

//TODO: Eclipse complains about unused messages. Find a way to make it shut up.
abstract class PatchJDTClasses extends DefaultTask {
    static def COMPILATION_UNIT_RESOLVER = 'org/eclipse/jdt/core/dom/CompilationUnitResolver'
    static def RANGE_EXTRACTOR = 'net/minecraftforge/srg2source/extract/RangeExtractor'
    static def RESOLVE_METHOD = 'resolve([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Lorg/eclipse/jdt/core/dom/FileASTRequestor;ILjava/util/Map;I)V'
    static def GET_CONTENTS = 'org/eclipse/jdt/internal/compiler/util/Util.getFileCharContent(Ljava/io/File;Ljava/lang/String;)[C'
    static def HOOK_DESC_RESOLVE = '(Ljava/lang/String;Ljava/lang/String;)[C'

    @Input abstract SetProperty<String> getTargets()
    @InputFiles @Classpath abstract ConfigurableFileCollection getLibraries()
    @OutputFile abstract RegularFileProperty getOutput()

    @TaskAction
    void patchClass() {
        def toProcess = targets.get().collect()
        new ZipOutputStream(new FileOutputStream(output.get().getAsFile())).withCloseable{ zout ->
            libraries.getFiles().stream().filter{ !it.isDirectory() }.each { lib ->
                new ZipFile(lib).withCloseable { zin ->
                    def remove = []
                    toProcess.each{ target -> 
                        def entry = zin.getEntry(target+'.class')
                        if (entry == null)
                            return
                        
                        def node = new ClassNode()
                        def reader = new ClassReader(zin.getInputStream(entry))
                        reader.accept(node, 0)
                        
                        //CompilationUnitResolver allows batch compiling, the problem is it is hardcoded to read the contents from a File.
                        //So we patch this call to redirect to us, so we can get the contents from our InputSupplier
                        if (COMPILATION_UNIT_RESOLVER.equals(target)) {
                            logger.lifecycle('Transforming: ' + target + ' From: ' + lib)
                            def resolve = node.methods.find{ RESOLVE_METHOD.equals(it.name + it.desc) }
                            if (resolve == null)
                                throw new RuntimeException('Failed to patch ' + target + ': Could not find method ' + RESOLVE_METHOD)
                            for (int x = 0; x < resolve.instructions.size(); x++) {
                                def insn = resolve.instructions.get(x)
                                if (insn.type == AbstractInsnNode.METHOD_INSN) {
                                    if (GET_CONTENTS.equals(insn.owner + '.' + insn.name + insn.desc)) {
                                        if (
                                            resolve.instructions.get(x - 5).opcode == Opcodes.NEW &&
                                            resolve.instructions.get(x - 4).opcode == Opcodes.DUP &&
                                            resolve.instructions.get(x - 3).opcode == Opcodes.ALOAD &&
                                            resolve.instructions.get(x - 2).opcode == Opcodes.INVOKESPECIAL &&
                                            resolve.instructions.get(x - 1).opcode == Opcodes.ALOAD
                                        ) {
                                            resolve.instructions.set(resolve.instructions.get(x - 5), new InsnNode(Opcodes.NOP)); // NEW File
                                            resolve.instructions.set(resolve.instructions.get(x - 4), new InsnNode(Opcodes.NOP)); // DUP
                                            resolve.instructions.set(resolve.instructions.get(x - 2), new InsnNode(Opcodes.NOP)); // INVOKESTATIC <init>
                                            insn.owner = RANGE_EXTRACTOR
                                            insn.desc = HOOK_DESC_RESOLVE
                                            logger.lifecycle('Patched ' + node.name)
                                        } else {
                                            throw new IllegalStateException('Found Util.getFileCharContents call, with unexpected context')
                                        }
                                    }
                                }
                            }
                        } else if (RANGE_EXTRACTOR.equals(target)) {
                            logger.lifecycle('Tansforming: ' + target + ' From: ' + lib)
                            def marker = node.methods.find{ 'hasBeenASMPatched()Z'.equals(it.name + it.desc) }
                            if (marker == null)
                                throw new RuntimeException('Failed to patch ' + target + ': Could not find method hasBeenASMPatched()Z')
                            marker.instructions.clear()
                            marker.instructions.add(new InsnNode(Opcodes.ICONST_1))
                            marker.instructions.add(new InsnNode(Opcodes.IRETURN))
                            logger.lifecycle('Patched: ' + node.name)
                        }
                        
                        def writer = new ClassWriter(0)
                        node.accept(writer)
                        
                        remove.add(target)
                        def nentry = new ZipEntry(entry.name)
                        nentry.time = 0
                        zout.putNextEntry(nentry)
                        zout.write(writer.toByteArray())
                        zout.closeEntry()
                    }
                    toProcess.removeAll(remove)
                }
            }
            if (!toProcess.isEmpty())
                throw new IllegalStateException('Patching class failed: ' + toProcess)
        }
    }
}

task patchJDT(type: PatchJDTClasses, dependsOn: jar) {
    targets.add(PatchJDTClasses.COMPILATION_UNIT_RESOLVER)
    targets.add(PatchJDTClasses.RANGE_EXTRACTOR)
    libraries.from(jar.archiveFile)
    libraries.from(configurations.implementation.filter{ !it.isDirectory() })
    output = project.layout.buildDirectory.file("patch_jdt.jar")
}

task shadowJar (type: Jar, dependsOn: patchJDT) {
    classifier 'shadow'
    duplicatesStrategy = 'exclude'
    with jar
    
    from zipTree(patchJDT.output)
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'about_files/**'
    exclude 'ant_tasks/**'
    exclude 'META-INF/versions/**'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/org/**'
    exclude 'META-INF/services/**'
    exclude 'META-INF/eclipse.inf'
    exclude 'META-INF/ECLIPSE_.*'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude '*.html'
    exclude '*.profile'
    exclude '*.properties'
    exclude '*.jar'
    exclude '*api_description'
    exclude '.options'
    exclude 'profile.list'
    exclude 'plugin.xml'
    exclude 'module-info.class'
    exclude 'Log4j-*'
    exclude 'log4j2.xml'
}

task pgShrinkJar(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {
    ext {
        inputJar = shadowJar.archiveFile.get().asFile
        outDir = file("${buildDir}/proguard")
        obfuscatedJar = "${outDir}/${jar.archiveBaseName.get()}.jar"
        config = 'proguard.pro'
    }
    inputs.file inputJar
    inputs.file config
    
    outDir.mkdirs()

    injars inputJar
    outjars obfuscatedJar
    libraryjars([filter: '!META-INF/versions/**'], configurations.implementation)

    // Get the target JVM executable path, then go 2 files up to remove the bin\java.exe
    def targetJvm = javaToolchains.launcherFor(java.toolchain).get().executablePath.asFile.parentFile.parentFile
    // As of Java 9, the runtime classes are packaged in modular jmod files.
    ['java.base', 'java.desktop', 'java.logging', 'jdk.unsupported', 'java.xml', 'java.management', 'java.compiler'].each {
        libraryjars "$targetJvm/jmods/${it}.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }
    configuration config
}

task shrinkJar(type: Jar, dependsOn: pgShrinkJar) {
    archiveClassifier = 'fatjar'
    from zipTree(pgShrinkJar.obfuscatedJar)
    manifest.from(jar.manifest)
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

artifacts {
    archives jar
    archives shrinkJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                from components.java
                artifact shrinkJar
                artifact sourcesJar
                name = 'Srg2Source'
                description = 'Srg2Source library for ForgeGradle'
                url = 'https://github.com/MinecraftForge/Srg2Source'
                scm {
                    url = 'https://github.com/MinecraftForge/Srg2Source'
                    connection = 'scm:git:git://github.com/MinecraftForge/Srg2Source.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/Srg2Source.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/Srg2Source/issues'
                }

                licenses {
                    license {
                        name = 'LGPL 2.1'
                        url = 'https://github.com/MinecraftForge/Srg2Source/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'LexManos'
                        name = 'Lex Manos'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (System.env.MAVEN_USER) {
                url 'https://maven.minecraftforge.net/'
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.env.MAVEN_USER ?: 'not'
                    password = System.env.MAVEN_PASSWORD ?: 'set'
                }
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}
